"use strict";(self.webpackChunkspringwolf_docs=self.webpackChunkspringwolf_docs||[]).push([[844],{8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var i=t(6540);const s={},a=i.createContext(s);function o(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(a.Provider,{value:e},n.children)}},8690:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"static-generation","title":"Static Generation","description":"Users tend to start out with running Springwolf at runtime as part of the Spring Boot application context.","source":"@site/docs/static-generation.md","sourceDirName":".","slug":"/static-generation","permalink":"/docs/static-generation","draft":false,"unlisted":false,"editUrl":"https://github.com/springwolf/springwolf.github.io/edit/master/docs/static-generation.md","tags":[],"version":"current","sidebarPosition":40,"frontMatter":{"sidebar_position":40},"sidebar":"defaultSidebar","previous":{"title":"Customizing","permalink":"/docs/configuration/customizing"},"next":{"title":"Behind the scenes","permalink":"/docs/behind-the-scenes"}}');var s=t(4848),a=t(8453);const o={sidebar_position:40},r="Static Generation",l={},c=[{value:"Spring Boot Test (full spring context)",id:"spring-boot-test-full-spring-context",level:2},{value:"Springwolf Standalone (minimal spring context)",id:"springwolf-standalone-minimal-spring-context",level:2},{value:"Gradle Plugin (full spring context)",id:"gradle-plugin-full-spring-context",level:2}];function p(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"static-generation",children:"Static Generation"})}),"\n",(0,s.jsx)(e.p,{children:"Users tend to start out with running Springwolf at runtime as part of the Spring Boot application context.\nStill, it's possible to generate the AsyncAPI documentation statically at build time."}),"\n",(0,s.jsxs)(e.p,{children:["One use-case is to protect against unexpected API changes using a test.\nFor this, the expected ",(0,s.jsx)(e.code,{children:"asyncapi.json"})," file is stored in the VCS repository."]}),"\n",(0,s.jsx)(e.h2,{id:"spring-boot-test-full-spring-context",children:"Spring Boot Test (full spring context)"}),"\n",(0,s.jsxs)(e.p,{children:["The most simple way is a Spring Boot test (taken from ",(0,s.jsx)(e.a,{href:"https://github.com/springwolf/springwolf-core/blob/master/springwolf-examples/springwolf-kafka-example/src/test/java/io/github/springwolf/examples/kafka/ApiIntegrationTest.java",children:"springwolf-kafka-example"}),"):"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'@SpringBootTest(\n     classes = {SpringwolfKafkaExampleApplication.class},\n     webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass ApiIntegrationTest {\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @Test\n    void asyncApiResourceArtifactTest() throws IOException {\n        // given\n        String url = "/springwolf/docs";\n       \n        // when\n        String actual = restTemplate.getForObject(url, String.class);\n       \n        // then\n        // writing the actual file can be useful for debugging (remember: .gitignore)\n        Files.writeString(Path.of("src", "test", "resources", "asyncapi.actual.json"), actual);\n\n        // then\n        InputStream s = this.getClass().getResourceAsStream("/asyncapi.json");\n        String expected = new String(s.readAllBytes(), StandardCharsets.UTF_8).trim();\n        assertEquals(expected, actual);\n    }\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"springwolf-standalone-minimal-spring-context",children:"Springwolf Standalone (minimal spring context)"}),"\n",(0,s.jsxs)(e.p,{children:["Especially for large application, starting the full Spring Boot context can be slow.\nSpringwolf ",(0,s.jsx)(e.em,{children:"standalone"})," uses a minimal Spring application context, by only including beans and configurations marked with ",(0,s.jsx)(e.code,{children:"@StandaloneConfiguration"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["Demo code (taken from ",(0,s.jsx)(e.a,{href:"https://github.com/springwolf/springwolf-core/blob/master/springwolf-examples/springwolf-kafka-example/src/test/java/io/github/springwolf/examples/kafka/StandaloneTest.java",children:(0,s.jsx)(e.code,{children:"springwolf-kafka-example"})}),"):"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'class StandaloneTest {\n\n    @Test\n    public void asyncApiStandaloneArtifactTest() throws IOException {\n        // given\n        StandaloneApplication standaloneApplication =\n                DefaultStandaloneApplication.builder().buildAndStart();\n\n        // when\n        AsyncAPI asyncApi = standaloneApplication.getAsyncApiService().getAsyncAPI();\n        String actual = new DefaultAsyncApiSerializerService().toJsonString(asyncApi);\n\n        // then\n        // writing the actual file can be useful for debugging (remember: gitignore)\n        Files.writeString(Path.of("src", "test", "resources", "asyncapi.standalone.json"), actual);\n\n        // then\n        InputStream s = this.getClass().getResourceAsStream("/asyncapi.json");\n        String expected = new String(s.readAllBytes(), StandardCharsets.UTF_8).trim();\n        assertEquals(expected, actualPatched);\n    }\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["By default, only the ",(0,s.jsx)(e.code,{children:"io.github.springwolf"})," package is scanned and ",(0,s.jsx)(e.code,{children:"@StandaloneConfiguration"})," in other packages are ",(0,s.jsx)(e.em,{children:"not"})," picked up.\nUse the ",(0,s.jsx)(e.code,{children:"DefaultStandaloneApplication.builder()"})," to customize the Spring environment, load custom beans and configurations."]}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsxs)(e.a,{href:"/docs/configuration/",children:[(0,s.jsx)(e.code,{children:"application.properties"})," configuration"]})," is picked up."]}),"\n",(0,s.jsx)(e.h2,{id:"gradle-plugin-full-spring-context",children:"Gradle Plugin (full spring context)"}),"\n",(0,s.jsxs)(e.p,{children:["You can use the ",(0,s.jsx)(e.a,{href:"https://github.com/springdoc/springdoc-openapi-gradle-plugin",children:(0,s.jsx)(e.code,{children:"springdoc-openapi-gradle-plugin"})})," and configure the plugin\nfor Springwolf (taken from ",(0,s.jsx)(e.a,{href:"https://github.com/springwolf/springwolf-core/blob/master/springwolf-examples/springwolf-kafka-example/build.gradle",children:(0,s.jsx)(e.code,{children:"springwolf-kafka-example"})}),"):"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-groovy",children:'openApi {\n    apiDocsUrl = "http://localhost:8080/springwolf/docs"\n    outputDir = file("$buildDir/docs")\n    outputFileName = "asyncapi.json"\n}\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The plugin will start up the spring boot application by using the ",(0,s.jsx)(e.code,{children:"bootRun"})," task and then try to download the documentation\nfrom the given ",(0,s.jsx)(e.code,{children:"apiDocsUrl"})," and store it in the ",(0,s.jsx)(e.code,{children:"outputDir"})," and with the given ",(0,s.jsx)(e.code,{children:"outputFileName"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["If your application is unable to start up with the ",(0,s.jsx)(e.code,{children:"bootRun"})," task, see if ",(0,s.jsx)(e.a,{href:"https://github.com/springdoc/springdoc-openapi-gradle-plugin#customization",children:"customBootRun"}),"\nproperties can help you."]})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}}}]);